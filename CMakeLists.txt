cmake_minimum_required(VERSION 3.16)
SET(PROJECT_NAME demodulator)
set(CMAKE_C_STANDARD 99)
execute_process(COMMAND clang -dumpmachine OUTPUT_VARIABLE TARGET OUTPUT_STRIP_TRAILING_WHITESPACE)

option(IS_NATIVE OFF)
option(IS_NVIDIA OFF)
option(DEFAULT_BUF_SIZE OFF)
option(IS_VERBOSE OFF)
option(NO_INTRINSICS OFF)
option(NO_AVX512 OFF)
option(NO_AVX2 OFF)
option(NO_NEON OFF)

if(DEFAULT_BUF_SIZE)
    add_compile_definitions(DEFAULT_BUF_SIZE=${DEFAULT_BUF_SIZE})
endif()

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
include(TargetArch)
target_architecture(TARGET_ARCH)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -fno-dwarf2-cfi-asm -fno-asynchronous-unwind-tables -fno-exceptions -fomit-frame-pointer -fno-math-errno -fno-trapping-math -ftree-vectorize")

if(UNIX AND NOT APPLE)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -z noexecstack")
endif()

if (IS_NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native -mtune=native")
    if (TARGET_ARCH STREQUAL "aarch64")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mcpu=native")
    endif()
endif()

if (NO_INTRINSICS OR IS_NVIDIA OR TARGET_ARCH MATCHES "arm")
    set(NO_AVX2 ON)
    set(NO_AVX512 ON)
    set(NO_NEON ON)
    set(HAS_NEON OFF)
    set(HAS_AVX512 OFF)
    set(HAS_AVX2 OFF)
endif()

if (IS_NVIDIA)
    execute_process(COMMAND nvcc ERROR_VARIABLE NVCC_OUT)
    if ("${NVCC_OUT}" MATCHES "No input files specified")
        add_compile_definitions(IS_NVIDIA)
        set(TARGET_ARCH "${TARGET_ARCH}+cuda")
    endif()
elseif (TARGET_ARCH STREQUAL "aarch64")
    set(NO_AVX2 ON)
    set(NO_AVX512 ON)
    execute_process(COMMAND cat /proc/cpuinfo OUTPUT_VARIABLE PROCINFO)
    set(HAS_NEON ((${PROCINFO} MATCHES "asimd") OR (${PROCINFO} MATCHES "neon")))
    if (NOT NO_INTRINSICS AND NOT NO_NEON AND HAS_NEON) #asimd
        set(NO_NEON OFF)
        set(HAS_NEON ON)
    endif()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstrict-align -momit-leaf-frame-pointer")
elseif (TARGET_ARCH STREQUAL "x86_64")
    set(NO_NEON ON)
    set(HAS_NEON OFF)
    if (NOT NO_INTRINSICS)
        if (NOT APPLE)
            execute_process(COMMAND cat /proc/cpuinfo OUTPUT_VARIABLE PROCINFO)
            if (NOT NO_AVX512 AND (${PROCINFO} MATCHES "avx512bw") AND (${PROCINFO} MATCHES "avx512f") AND (${PROCINFO} MATCHES "avx512dq"))
                set(HAS_AVX512 ON)
                message("-- AVX512(bw|dq|f) detected")
            else()
                set(NO_AVX512 ON)
                set(HAS_AVX512 OFF)
            endif()
            if (${PROCINFO} MATCHES "avx2")
                set(HAS_AVX2 ON)
                message("-- AVX2 detected")
            else()
                set(NO_AVX2 ON)
                set(HAS_AVX2 OFF)
            endif()
        else()
            if (NOT NO_AVX512)
                execute_process(
                        COMMAND sh -c "sysctl hw | grep -E 'avx512(bw|dq|f)' | grep ': 1' | wc -l"
                        OUTPUT_VARIABLE PROCINFO OUTPUT_STRIP_TRAILING_WHITESPACE)
                if (${PROCINFO} MATCHES 3)
                    set(HAS_AVX512 ON)
                    message("-- AVX512(bw|dq|f) detected")
                else()
                    set(NO_AVX512 ON)
                    set(HAS_AVX512 OFF)
                endif()
            endif()
            execute_process(
                    COMMAND sh -c "sysctl hw | grep -E '(fma|avx2)' | grep ': 1' | wc -l"
                    OUTPUT_VARIABLE PROCINFO OUTPUT_STRIP_TRAILING_WHITESPACE)
            if (${PROCINFO} MATCHES 2)
                set(HAS_AVX2 ON)
                message("-- AVX2 detected")
            else()
                set(NO_AVX2 ON)
                set(HAS_AVX2 OFF)
            endif()
        endif()
    endif()
    if (NOT NO_AVX512)
        message("-- USING AVX512")
    elseif (NOT NO_AVX2)
        message("-- USING AVX2")
    endif()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstrict-aliasing")
else()
    set(NO_INTRINSICS ON)
    set(NO_AVX2 ON)
    set(NO_AVX512 ON)
    set(NO_NEON ON)
endif()

if (IS_VERBOSE)
    message("-- TARGET_ARCH ${TARGET_ARCH}")
endif()

if (IS_NVIDIA)
    message("-- USING CUDA")
    set(CMAKE_CUDA_ARCHITECTURES native)
    add_compile_definitions(__CUDACC__)
    project(${PROJECT_NAME} LANGUAGES CUDA C)
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Werror=all-warnings -m64 -use_fast_math -Xcompiler=\"${CMAKE_C_FLAGS}\" -res-usage ")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/cuda/matrix.cu")
    add_executable(${PROJECT_NAME} ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c)
    set_property(TARGET ${PROJECT_NAME} PROPERTY CUDA_SEPARABLE_COMPILATION ON)
else()
    project(${PROJECT_NAME} LANGUAGES C)
    find_package(Threads)
    if (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -diag-disable=10441")
    endif()

    if(NO_INTRINSICS AND NO_AVX2 AND NO_AVX512 AND NO_NEON)
        message("-- USING VANILLA C")
        set(SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/src/matrix.c" "${CMAKE_CURRENT_SOURCE_DIR}/src/fmath.c" "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c")
    elseif(TARGET_ARCH STREQUAL "aarch64" AND HAS_NEON)
        message("-- USING NEON INTRINSICS")
        set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c")
        set(SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/intrinsics/neon/matrix.c")
        include_directories("${CMAKE_HOME_DIRECTORY}/include")
    elseif(TARGET_ARCH STREQUAL "x86_64" AND (HAS_AVX2 OR HAS_AVX512))
        message("-- USING INTEL INTRINSICS")

        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
        if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store")
        endif()
        set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c")
        if (HAS_AVX512)
            set(SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/intrinsics/intel/mm512_matrix.c")
        else()
            set(SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/intrinsics/intel/matrix.c")
        endif()
    endif()
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/include/matrix.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h")

    if(CMAKE_THREAD_LIBS_INIT)
        target_link_libraries(${PROJECT_NAME} PUBLIC pthread)
    endif()

#    if(NO_AVX512 AND NO_AVX2 AND NO_NEON)
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
#    endif()
endif()

install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT Runtime LIBRARY DESTINATION lib COMPONENT Runtime)
if (IS_VERBOSE)
    message("-- CMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
    message("-- CMAKE_ASM_FLAGS=${CMAKE_ASM_FLAGS}")
    message("-- CMAKE_CUDA_FLAGS=${CMAKE_CUDA_FLAGS}")
endif()

if(NO_AVX2)
    add_compile_definitions(NO_AVX2=${NO_AVX2})
endif()

if(NO_AVX512)
    add_compile_definitions(NO_AVX512=${NO_AVX512})
endif()

if(NO_INTRINSICS)
    add_compile_definitions(NO_INTRINSICS=${NO_INTRINSICS})
endif()