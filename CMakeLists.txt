cmake_minimum_required(VERSION 3.16)
SET(PROJECT_NAME demodulator)
set(CMAKE_C_STANDARD 99)
execute_process(COMMAND clang -dumpmachine OUTPUT_VARIABLE TARGET OUTPUT_STRIP_TRAILING_WHITESPACE)

option(IS_NATIVE OFF)
option(IS_NVIDIA OFF)
option(DEFAULT_BUF_SIZE OFF)
option(IS_VERBOSE OFF)
option(SET_PRECISION OFF)

if(DEFAULT_BUF_SIZE)
    add_compile_definitions(DEFAULT_BUF_SIZE=${DEFAULT_BUF_SIZE})
endif()

if(IS_VERBOSE)
    add_compile_definitions(VERBOSE)
endif()

if (SET_PRECISION)
    add_compile_definitions(PRECISION)
endif()

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
include(TargetArch)
target_architecture(TARGET_ARCH)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -fno-dwarf2-cfi-asm -fno-asynchronous-unwind-tables -fno-exceptions -fomit-frame-pointer -fno-math-errno -fno-trapping-math -ftree-vectorize")

if(UNIX AND NOT APPLE)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -z noexecstack")
endif()

if (IS_NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native -mtune=native")
    if (TARGET_ARCH STREQUAL "aarch64")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mcpu=native")
    endif()
endif()

if (IS_NVIDIA)
    execute_process(COMMAND nvcc ERROR_VARIABLE NVCC_OUT)
    if ("${NVCC_OUT}" MATCHES "No input files specified")
        add_compile_definitions(IS_NVIDIA)
        set(TARGET_ARCH "${TARGET_ARCH}+cuda")
    endif()

    message("-- USING CUDA")
    set(CMAKE_CUDA_ARCHITECTURES native)
    add_compile_definitions(__CUDACC__)
    project(${PROJECT_NAME} LANGUAGES CUDA C)
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Werror=all-warnings -m64 -use_fast_math -Xcompiler=\"${CMAKE_C_FLAGS}\" -res-usage ")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/cuda/matrix.cu")
    add_executable(${PROJECT_NAME} ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c)
    set_property(TARGET ${PROJECT_NAME} PROPERTY CUDA_SEPARABLE_COMPILATION ON)
else()
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    project(${PROJECT_NAME} LANGUAGES C)
    find_package(Threads)
    set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c")

    if (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -diag-disable=10441")
    endif()
    set(SRCS ${SRCS}
            "${CMAKE_CURRENT_SOURCE_DIR}/src/filter.c"
            "${CMAKE_CURRENT_SOURCE_DIR}/src/matrix.c")
    add_executable(${PROJECT_NAME}  ${SRCS})

    if(CMAKE_THREAD_LIBS_INIT)
        target_link_libraries(${PROJECT_NAME} PUBLIC pthread)
    endif()
    target_link_libraries(${PROJECT_NAME} PUBLIC m)
endif()

install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT Runtime LIBRARY DESTINATION lib COMPONENT Runtime)

if (IS_VERBOSE)
    message("-- TARGET_ARCH ${TARGET_ARCH}")
    message("-- CMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
    message("-- CMAKE_CUDA_FLAGS=${CMAKE_CUDA_FLAGS}")
endif()
