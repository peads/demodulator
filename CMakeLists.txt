cmake_minimum_required(VERSION 3.16)
SET(PROJECT_NAME demodulator)
set(CMAKE_C_STANDARD 99)
execute_process(COMMAND clang -dumpmachine OUTPUT_VARIABLE TARGET OUTPUT_STRIP_TRAILING_WHITESPACE)

option(IS_NATIVE OFF)
option(IS_NVIDIA OFF)
option(DEFAULT_BUF_SIZE OFF)
option(IS_VERBOSE OFF)
option(NO_INTRINSICS OFF)
option(NO_AVX512 OFF)
option(NO_AVX2 OFF)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
include(TargetArch)
target_architecture(TARGET_ARCH)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ftree-vectorize")

if(UNIX AND NOT APPLE)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -z noexecstack")
endif()

if (IS_NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native -mtune=native")
    if (TARGET_ARCH STREQUAL "aarch64")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mcpu=native")
    endif()
endif()

if (IS_NVIDIA)
    execute_process(COMMAND nvcc ERROR_VARIABLE NVCC_OUT)
    if ("${NVCC_OUT}" MATCHES "No input files specified")
        add_compile_definitions(IS_NVIDIA)
        set(NO_AVX2 ON)
        set(NO_AVX512 ON)
        set(NO_INTRINSICS ON)
        set(TARGET_ARCH "${TARGET_ARCH}+cuda")
    endif()
elseif (TARGET_ARCH STREQUAL "aarch64" OR TARGET_ARCH MATCHES "arm")
    set(NO_AVX2 ON)
    set(NO_AVX512 ON)
    #        set(IS_ARMINT true)
    if (TARGET_ARCH STREQUAL "aarch64")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstrict-align")
    endif()
elseif (TARGET_ARCH STREQUAL "x86_64")
    if (NO_INTRINSICS)
        set(NO_AVX2 ON)
        set(NO_AVX512 ON)
    else()
        if (NOT APPLE)
            execute_process(COMMAND cat /proc/cpuinfo OUTPUT_VARIABLE PROCINFO)
            if (NOT NO_AVX512 AND (${PROCINFO} MATCHES "avx512bw") AND (${PROCINFO} MATCHES "avx512f") AND (${PROCINFO} MATCHES "avx512dq"))
                set(HAS_AVX512 ON)
                message("-- AVX512(bw|dq|f) detected")
            endif()
            if (${PROCINFO} MATCHES "avx2")
                set(HAS_AVX2 ON)
                message("-- AVX2 detected")
            endif()
        else()
            if (NOT NO_AVX512)
                execute_process(
                        COMMAND sh -c "sysctl hw.optional | grep avx512 | sed -E 's/hw\\.optional\\.avx512(bw|dq|f): 1/yes/g' | grep yes | wc -l"
                        OUTPUT_VARIABLE PROCINFO OUTPUT_STRIP_TRAILING_WHITESPACE)
                if (${PROCINFO} MATCHES 3)
                    set(HAS_AVX512 ON)
                    message("-- AVX512(bw|dq|f) detected")
                endif()
            endif()
            execute_process(
                    COMMAND sh -c "sysctl hw.optional | grep avx2 | sed -E 's/hw\\.optional\\.avx2_0: 1/yes/g' | grep yes | wc -l"
                    OUTPUT_VARIABLE PROCINFO OUTPUT_STRIP_TRAILING_WHITESPACE)
            if (${PROCINFO} MATCHES 1)
                set(HAS_AVX2 ON)
                message("-- AVX2 detected")
            endif()
        endif()
    endif()
    if (NOT NO_AVX512)
        message("-- USING AVX512")
    elseif (NOT NO_AVX2)
        message("-- USING AVX2")
    endif()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstrict-aliasing")
else()
    set(NO_INTRINSICS ON)
    set(NO_AVX2 ON)
    set(NO_AVX512 ON)
endif()

if (IS_VERBOSE)
    message("-- TARGET_ARCH ${TARGET_ARCH}")
endif()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -fno-dwarf2-cfi-asm -fno-asynchronous-unwind-tables -fno-exceptions -fomit-frame-pointer -fno-math-errno -fno-trapping-math")

if (IS_NVIDIA)
    message("-- USING CUDA")
#    add_compile_definitions(DEFAULT_BUF_SIZE=1048576)
    add_compile_definitions(DEFAULT_BUF_SIZE=524288)
    set(CMAKE_CUDA_ARCHITECTURES native)
    add_compile_definitions(__CUDACC__)
    project(${PROJECT_NAME} LANGUAGES CUDA C)
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Werror=all-warnings -m64 -use_fast_math -Xcompiler=\"${CMAKE_C_FLAGS}\" -res-usage ")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/cuda/matrix.cu")
    add_executable(${PROJECT_NAME} ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c)
    set_property(TARGET ${PROJECT_NAME} PROPERTY CUDA_SEPARABLE_COMPILATION ON)
else()
    project(${PROJECT_NAME} LANGUAGES C)

    if (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -diag-disable=10441")
    endif()

    if((TARGET_ARCH STREQUAL "x86_64") AND NOT (NO_AVX2 AND NO_AVX512))
        message("-- USING INTEL INTRINSICS")

        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
        if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store")
        endif()
        set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c")
        if (HAS_AVX512)
            set(SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/intrinsics/intel/mm512_matrix.c")
        else()
            set(SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/intrinsics/intel/matrix.c")
        endif()
    else()
        message("-- USING VANILLA C")
        set(SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/src/matrix.c" "${CMAKE_CURRENT_SOURCE_DIR}/src/fmath.c" "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c")
    endif()
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/include/fmath.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/matrix.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h")

    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
    endif()
endif()

install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT Runtime LIBRARY DESTINATION lib COMPONENT Runtime)
if (IS_VERBOSE)
    message("-- CMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
    message("-- CMAKE_ASM_FLAGS=${CMAKE_ASM_FLAGS}")
    message("-- CMAKE_CUDA_FLAGS=${CMAKE_CUDA_FLAGS}")
endif()
