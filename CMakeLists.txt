cmake_minimum_required(VERSION 3.16)
SET(PROJECT_NAME demodulator)
set(CMAKE_C_STANDARD 99)
execute_process(COMMAND clang -dumpmachine OUTPUT_VARIABLE TARGET OUTPUT_STRIP_TRAILING_WHITESPACE)

option(IS_NATIVE OFF)
option(IS_NVIDIA OFF)
option(IS_ASSEMBLY OFF)
option(IS_INTRINSICS OFF)
option(DEFAULT_BUF_SIZE OFF)
option(IS_VERBOSE OFF)

if(IS_NVIDIA AND IS_INTRINSICS OR IS_NVIDIA AND IS_ASSEMBLY OR IS_INTRINSICS AND IS_ASSEMBLY)
    message(FATAL_ERROR "Multiple mutually exclusive options selected:\nIS_NVIDIA=${IS_NVIDIA}\nIS_INTRINSICS=${IS_INTRINSICS}\nIS_ASSEMBLY=${IS_ASSEMBLY}")
endif()

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
include(TargetArch)
target_architecture(TARGET_ARCH)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ftree-vectorize")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -z noexecstack")

#TODO this should be the main logic to elimnate vars, but I'm lazy
if (TARGET_ARCH STREQUAL "x86_64")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstrict-aliasing")
elseif(TARGET_ARCH STREQUAL "aarch64")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstrict-align")
endif()

if (IS_NVIDIA)
    add_compile_definitions(IS_NVIDIA)
    set(TARGET_ARCH "${TARGET_ARCH}+cuda")
elseif(IS_INTRINSICS)
    if (TARGET_ARCH STREQUAL "x86_64")
        set(IS_INTINT true)
    elseif (TARGET_ARCH STREQUAL "aarch64")
        set(IS_ARMINT true)
    endif()
elseif (IS_ASSEMBLY)
    if (TARGET_ARCH STREQUAL "x86_64")
        set(IS_INTEL true)
        add_compile_definitions(IS_INTEL)
    elseif (TARGET_ARCH STREQUAL "aarch64")
        set(IS_ARM true)
        add_compile_definitions(IS_ARM)
    endif()
endif()

if (IS_NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native -mtune=native")
    if (IS_VERBOSE)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ftree-vectorizer-verbose=2")
    endif()
    if (TARGET_ARCH STREQUAL "aarch64")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mcpu=native")
    endif()
endif()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -fno-dwarf2-cfi-asm -fno-asynchronous-unwind-tables -fno-exceptions -fomit-frame-pointer -fno-math-errno -fno-trapping-math")

if (IS_NVIDIA)
    set(CMAKE_CUDA_ARCHITECTURES native)
    set(CMAKE_CUDA_COMPILER "/usr/local/cuda/bin/nvcc")
    add_compile_definitions(__CUDACC__)
    project(${PROJECT_NAME} LANGUAGES CUDA C)
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -m64 -ftz=true -use_fast_math -Xcompiler=\"${CMAKE_C_FLAGS}\" -res-usage ")
    FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/cuda/*.cu" "src/main.c")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")

    add_executable(${PROJECT_NAME} ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c)
    set_property(TARGET ${PROJECT_NAME} PROPERTY CUDA_SEPARABLE_COMPILATION ON)
elseif(IS_INTEL)
    message("-- USING X64 ASM")
    add_compile_definitions(DEFAULT_BUF_SIZE=2048)
    project(${PROJECT_NAME} LANGUAGES C ASM)
    set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS}")
    if (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -diag-disable=10441")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -diag-disable=10441")
    endif()

    FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/asm/*.S" "src/main.c")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h)

    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx2 -mfma -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store")
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
    endif()
elseif(IS_ARM)
    message("-- USING AARCH64 ASM")
    add_compile_definitions(DEFAULT_BUF_SIZE=2048)
    project(${PROJECT_NAME} LANGUAGES C ASM)
    set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS}")

    FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/arm_asm/*.S" "src/main.c")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h)

    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
    endif()
else()
    project(${PROJECT_NAME} LANGUAGES C)

    if (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -diag-disable=10441")
    endif()

    if(IS_INTINT)
        message("-- USING INTEL INTRINSICS")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error=unused-result -mavx2 -mfma -mfpmath=sse -mvzeroupper")
        if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store")
        endif()
        set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c" "${CMAKE_CURRENT_SOURCE_DIR}/intrinsics/intel/matrix.c")
    else()
        message("-- USING VANILLA C")
        FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/*.c")
    endif()
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/include/matrix.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h")

    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
    endif()
endif()

install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT Runtime LIBRARY DESTINATION lib COMPONENT Runtime)
if (IS_VERBOSE)
	message("-- CMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
	message("-- CMAKE_ASM_FLAGS=${CMAKE_ASM_FLAGS}")
	message("-- CMAKE_CUDA_FLAGS=${CMAKE_CUDA_FLAGS}")
	message("-- TARGET_ARCH=${TARGET_ARCH}")
endif()
