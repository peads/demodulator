cmake_minimum_required(VERSION 3.16)
SET(PROJECT_NAME demodulator)
set(CMAKE_C_STANDARD 99)
execute_process(COMMAND clang -dumpmachine OUTPUT_VARIABLE TARGET OUTPUT_STRIP_TRAILING_WHITESPACE)

option(IS_NATIVE OFF)
option(IS_NVIDIA OFF)
option(DEFAULT_BUF_SIZE OFF)
option(IS_INTEL OFF)
option(IS_INTINT OFF)
option(IS_ARM OFF)

if(IS_INTEL)
    add_compile_definitions(IS_INTEL)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstrict-aliasing")
endif()

if(IS_ARM)
    add_compile_definitions(IS_ARM)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstrict-align")
endif()

if (IS_NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native -mtune=native")
endif()

if (IS_NVIDIA)
    add_compile_definitions(IS_NVIDIA)
endif()

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -fno-dwarf2-cfi-asm -fno-asynchronous-unwind-tables -fno-exceptions -fomit-frame-pointer -fno-math-errno -fno-trapping-math")

if (IS_NVIDIA)
    set(CMAKE_CUDA_ARCHITECTURES 52 53 61 62 70 72 75 80 86)
    set(CMAKE_CUDA_COMPILER "/usr/local/cuda/bin/nvcc")
    add_compile_definitions(__CUDACC__)
    project(${PROJECT_NAME} LANGUAGES CUDA C)
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -m64 -ftz=true -use_fast_math -Xcompiler=\"-Wno-unused-result -fno-dwarf2-cfi-asm -fno-asynchronous-unwind-tables -fno-exceptions -fomit-frame-pointer -fno-math-errno -fno-trapping-math\" -res-usage ")
    FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/cuda/*.cu" "src/main.c")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")

    add_executable(${PROJECT_NAME} ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c)
    set_property(TARGET ${PROJECT_NAME} PROPERTY CUDA_SEPARABLE_COMPILATION ON)
elseif(IS_INTEL)
    add_compile_definitions(DEFAULT_BUF_SIZE=2048)
    project(${PROJECT_NAME} LANGUAGES C ASM)

    if (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -diag-disable=10441")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -diag-disable=10441")
    endif()

    FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/asm/*.S" "src/main.c")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h)

    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx2 -mfma -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store")
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
    endif()
elseif(IS_ARM)
    add_compile_definitions(DEFAULT_BUF_SIZE=2048)
    project(${PROJECT_NAME} LANGUAGES C ASM)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstrict-align")
    set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS}")

    FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/arm_asm/*.S" "src/main.c")
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/src/main.c ${SRCS} ${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h)

    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
    endif()
else()
    project(${PROJECT_NAME} LANGUAGES C)

    if (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -diag-disable=10441")
    endif()

    if(IS_INTINT)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx2 -mfma -mno-avx256-split-unaligned-load -mno-avx256-split-unaligned-store -fstrict-aliasing")
        set(SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c" "${CMAKE_CURRENT_SOURCE_DIR}/intrinsics/intel/matrix.c")
    else()
        FILE(GLOB SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/*.c")
    endif()
    include_directories("${CMAKE_HOME_DIRECTORY}/include")
    add_executable(${PROJECT_NAME} ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/include/matrix.h" "${CMAKE_CURRENT_SOURCE_DIR}/include/prototypes.h")

    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(${PROJECT_NAME} PUBLIC m)
    endif()
endif()

install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT Runtime LIBRARY DESTINATION lib COMPONENT Runtime)

message(CMAKE_C_FLAGS="${CMAKE_C_FLAGS}")
message(CMAKE_ASM_FLAGS="${CMAKE_ASM_FLAGS}")
